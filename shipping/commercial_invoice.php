<?php
require_once ('../includes/prepend.inc.php');
QApplication::Authenticate ( 5 );
/**
 * Error reporting
 */
error_reporting ( E_ALL );
ini_set ( 'display_errors', TRUE );
ini_set ( 'display_startup_errors', TRUE );
date_default_timezone_set ( 'America/Vancouver' );
/**
 * Include PHPExcel
 */
require_once ('../extensions/Classes/PHPExcel.php');
class CommercialInvoiceForm extends QForm {
	// General Form Variables
	protected $objShipment;
	protected $items;
	protected $objPHPExcel;
	
	protected function Form_Create() {
		$this->SetupShipment ();
		$this->lblExcel_Create ();
	}
	protected function SetupShipment() {
		// Lookup Object PK information from Query String (if applicable)
		// Set mode to Edit or New depending on what's found
		$intShipmentId = QApplication::QueryString ( 'intShipmentId' );
		if (($intShipmentId)) {
			$this->objShipment = Shipment::Load ( ($intShipmentId) );
			if (! $this->objShipment)
				throw new Exception ( 'Could not find a Shipment object with PK arguments: ' . $intShipmentId );
		}
		
		$this->items = Item::LoadArrayByShipmentId ( $this->objShipment->ShipmentId );
		if (! $this->items)
			throw new Exception ( 'Could not find Items object with PK arguments: ' . $intShipmentId );
	}
	protected function lblExcel_Create() {
		//$this->lblExcel = new QLabel ( $this );
		//$this->lblExcel->HtmlEntities = false;
		// Create new spreadsheet object
		$this->objPHPExcel = new PHPExcel ();
		
		// Set document properties
		$this->objPHPExcel->getProperties ()
			->setCreator ( 'PHPOffice' )
			->setLastModifiedBy ( 'SAMS' )
			->setTitle ( 'Commercial Invoice' )
			->setSubject ( 'Commercial Invoice' )
			->setDescription ( 'Commerial Invoice generated by PHPExcel using SAMS data' )
			->setKeywords ( 'commercial invoice' )
			->setCategory ( 'commercial invoice' );
		
		// Set default font
		$this->objPHPExcel->getDefaultStyle ()->getFont ()->setName ( 'Arial' )->setSize ( 10 );
		$styleMediumBlackBorder = array (
				'borders' => array (
						'allborders' => array (
								'style' => PHPExcel_Style_Border::BORDER_MEDIUM,
								'color' => array (
										'argb' => 'FF000000'
								)
						)
				)
		);		
		$styleThinBlackBorder = array (
				'borders' => array (
						'allborders' => array (
								'style' => PHPExcel_Style_Border::BORDER_THIN,
								'color' => array (
										'argb' => 'FF000000' 
								) 
						) 
				) 
		);
		$styleThinBlackBorderOutline = array (
				'borders' => array (
						'outline' => array (
								'style' => PHPExcel_Style_Border::BORDER_THIN,
								'color' => array (
										'argb' => 'FF000000'
								)
						)
				)
		);
		$styleMediumBlackBorderOutline = array (
				'borders' => array (
						'outline' => array (
								'style' => PHPExcel_Style_Border::BORDER_MEDIUM,
								'color' => array (
										'argb' => 'FF000000' 
								) 
						) 
				) 
		);
		$styleMediumBlackBorderTop = array (
				'borders' => array (
						'top' => array (
								'style' => PHPExcel_Style_Border::BORDER_MEDIUM,
								'color' => array (
										'argb' => 'FF000000' 
								) 
						) 
				) 
		);
		// Set page orientation and size
		$pageSetup = $this->objPHPExcel->getActiveSheet ()->getPageSetup ();
		$pageSetup->setOrientation ( PHPExcel_Worksheet_PageSetup::ORIENTATION_PORTRAIT )
			->setPaperSize ( PHPExcel_Worksheet_PageSetup::PAPERSIZE_LETTER )
			->setFitToPage ( true )
			->setFitToWidth ( 1 )
			->setFitToHeight ( 0 );

		$sheet = $this->objPHPExcel->getActiveSheet ();
		
		// Merge some cells and add set text
		$shipment = $this->objShipment;
		$fromAddress = explode("<br/>", $shipment->FromAddress->__toStringFullAddressWithWebsite());
		$toAddress = explode("<br/>", $shipment->ToAddress->__toStringFullAddressWithWebsite());
		
		$sheet->mergeCells ( 'A1:L1' )
			->setCellValue ( 'A1', "Commercial Invoice" )
			->mergeCells ( 'A2:C2' )
			->setCellValue ( 'A2', "DATE OF EXPORTATION:" )
			->mergeCells ( 'A3:C3' )
			->setCellValue ( 'A3', $shipment->ShipDate->__toString())
			->mergeCells ( 'D2:J2' )
			->setCellValue ( 'D2', "EXPORT REFERENCES (i.e. order no, invoice no, etc)" )
			->mergeCells ( 'D3:J3' )
			->mergeCells ( 'K2:L2' )
			->setCellValue ( 'K2', "PAGE OF   PAGES" )
			->mergeCells ( 'K3:L3' )
			->mergeCells ( 'A4:E4' )
			->setCellValue ( 'A4', "SHIPPER / EXPORTER:" )
			->mergeCells ( 'A5:E5' )
			->mergeCells ( 'A6:E6' )
			->mergeCells ( 'A7:E7' )
			->mergeCells ( 'A8:E8' )
			->mergeCells ( 'A9:E9' )
			->mergeCells ( 'A10:E10' )
			->mergeCells ( 'A11:E11' )
			->mergeCells ( 'F4:L4' )
			->setCellValue ( 'F4', "CONSIGNEE / SHIP TO:" )
			->mergeCells ( 'F5:L5' )
			->mergeCells ( 'F6:L6' )
			->mergeCells ( 'F7:L7' )
			->mergeCells ( 'F8:L8' )
			->mergeCells ( 'F9:L9' )
			->mergeCells ( 'F10:L10' )
			->mergeCells ( 'F11:L11' )
			->mergeCells ( 'A12:E12' )
			->setCellValue ( 'A12', "COUNTRY OF EXPORT:" )
			->mergeCells ( 'A13:E13' )
			->mergeCells ( 'A14:E14' )
			->setCellValue ( 'A14', "COUNTRY OF DESTINATION:" )
			->mergeCells ( 'A15:E15' )
			->mergeCells ( 'A16:E16' )
			->setCellValue ( 'A16', "MODE OF TRANSPORTATION:" )
			->mergeCells ( 'A17:E17' )
			->mergeCells ( 'F12:L14' )
			->setCellValue ( 'F12', "**Temporary Importation**" )
			->mergeCells ( 'F15:L17' )
			->setCellValue ( 'F15', "Used Geophysical equipment used in mining exploration as tools of the trade. To be returned to Country of Origin on completion of job." );
		
		$sheet->setCellValue ( 'A18', "Country of Origin" )
			->setCellValue ( 'B18', "HS Code" )
			->setCellValue ( 'C18', "Marks / Nos" )
			->setCellValue ( 'D18', "No of Pkg" )
			->setCellValue ( 'E18', "Full Description of goods" )
			->setCellValue ( 'F18', "QTY" )
			->setCellValue ( 'G18', "Unit of Measure (in)" )
			->setCellValue ( 'H18', "Unit of Measure (cm)" )
			->setCellValue ( 'I18', "Weight (lb)" )
			->setCellValue ( 'J18', "Weight (kg)" )
			->setCellValue ( 'K18', "Unit Value" )
			->setCellValue ( 'L18', "Total Value" );
		
		//  Fill in addresses
		$sheet->setCellValue('A5', $shipment->FromCompany->__toString())
			->setCellValue('F5', $shipment->ToCompany->__toString());
		$i = 6;
		$j = 6;
		foreach ( $fromAddress as $fromValue ) {
			$sheet->setCellValue( 'A'.$i , $fromValue );
			$i++;
		}
		foreach ( $toAddress as $toValue ) {
			$sheet->setCellValue( 'F'.$j , $toValue );
			$j++;
		}
		$sheet->setCellValue('A13' , "Canada");
		
		// Set country of destination
		$strQuery = sprintf("
				SELECT
					shipment_custom_field_helper.cfv_10 as project_country
				FROM
					shipment_custom_field_helper
				WHERE
					shipment_custom_field_helper.shipment_id = %s", $this->objShipment->ShipmentId);

		$objDatabase = QApplication::$Database[1];
		$objDBResult = $objDatabase->Query($strQuery);

		$val = $objDBResult->GetNextRow()->GetColumn('project_country', 'VarChar');
		if ($val)
			$sheet->setCellValue('A15' , $val);
			
		function unit_convert($v){
			return 0.4 * (float) $v;
		}	
		$row = 19;
		$startRow = array();
		$endRow = array();
		$groupItems = array();
		
		// Go through all items and group by PackingBox
		if($this->items) {
			foreach ($this->items as $value){
				// exclude items that show on list is No (so do if not 'No')
				if (strpos($value->ShowOnList, 'No')=== false){
					$packingBox = $value->PackingBox;
					if (empty($packingBox)){
						if (empty($value->ParentAsset)){
							$packingBox = "None";
						} else {
							$packingBox = $value->ParentAsset;
						}
							
					}
					if (array_key_exists($packingBox, $groupItems)){
						$otherValues = $groupItems[$packingBox];
						$code = $value->Code;
						if (strcasecmp($packingBox, $code)== 0){
							if (empty($otherValues)){
								$groupItems[$packingBox][] = $value;
							} else {
								$groupItems[$packingBox] = array_unshift($otherValues, $value);
							}
						} else {
							$groupItems[$packingBox][] = $value;
						}
					} else {
						$groupItems[$packingBox][] = $value;
					}	
				}
			}
		}
		// Write each column of item data
		$increment = 1;
		if ($groupItems){
			foreach ($groupItems as $key => $listvalues){
				$startRow[] = $row;
				$firstItem = true;
				foreach($listvalues as $item){
					if ($firstItem){
						$sheet->setCellValue('D'.$row , 'Box #'.$increment);
						$firstItem = false;
					}
					
					$centimeter = strtolower($item->Dimensions);
									
					if ($centimeter) {
						$dimension = array_map('unit_convert', explode('x',$centimeter));
						$inches = implode(' x ', $dimension);
					} else {
						$inches = '';
					}
					$kgrams = $item->Weight;

					$shipValue = $item->ShippingValue;
					$box = $item->PackingBox;
					$sheet->setCellValue('A'.$row , $item->CountryOrigin)
						->setCellValue('B'.$row , $item->HScode)
						->setCellValue('C'.$row , $item->Code)
//						->setCellValue('D'.$row , $box)
						->setCellValue('E'.$row , $item->ShortDescription)
						->setCellValue('F'.$row , $item->Quantity)
						->setCellValue('G'.$row , $inches)
						->setCellValue('H'.$row , $centimeter)
						->setCellValue('J'.$row , $kgrams)
						->setCellValue('K'.$row , $shipValue)
						->setCellValue('L'.$row , '=F'.$row.'*K'.$row);

					$pounds = '=IF(J'.$row.'="","",2.205*J'.$row.')';
					$sheet->setCellValue('I'.$row , $pounds);
					unset($inches, $kgrams);
					$row++;
				}
				$increment++;
				$endRow[] = $row-1;
			}
		}
		$lastRow = $row-1;
		
		// Row specific styles
		$sheet->getStyle ( 'A19:L'.$lastRow )->applyFromArray ( $styleThinBlackBorder );
		

		// loop around $startRow and $endRow to get outline
		foreach(array_combine(array_values($startRow), array_values($endRow)) as $element1 => $element2){

			$sheet->getStyle ( 'A'.$element1.':A'.$element2 )->applyFromArray ( $styleMediumBlackBorderOutline );
			$sheet->getStyle ( 'B'.$element1.':B'.$element2 )->applyFromArray ( $styleMediumBlackBorderOutline );
			$sheet->getStyle ( 'C'.$element1.':C'.$element2 )->applyFromArray ( $styleMediumBlackBorderOutline );
			$sheet->getStyle ( 'D'.$element1.':D'.$element2 )->applyFromArray ( $styleMediumBlackBorderOutline );
			$sheet->getStyle ( 'E'.$element1.':E'.$element2 )->applyFromArray ( $styleMediumBlackBorderOutline );
			$sheet->getStyle ( 'F'.$element1.':F'.$element2 )->applyFromArray ( $styleMediumBlackBorderOutline );
			$sheet->getStyle ( 'G'.$element1.':G'.$element2 )->applyFromArray ( $styleMediumBlackBorderOutline );
			$sheet->getStyle ( 'H'.$element1.':H'.$element2 )->applyFromArray ( $styleMediumBlackBorderOutline );
			$sheet->getStyle ( 'I'.$element1.':I'.$element2 )->applyFromArray ( $styleMediumBlackBorderOutline );
			$sheet->getStyle ( 'J'.$element1.':J'.$element2 )->applyFromArray ( $styleMediumBlackBorderOutline );
			$sheet->getStyle ( 'K'.$element1.':K'.$element2 )->applyFromArray ( $styleMediumBlackBorderOutline );
			$sheet->getStyle ( 'L'.$element1.':L'.$element2 )->applyFromArray ( $styleMediumBlackBorderOutline );
			$sheet->getStyle ( 'A'.$element1.':L'.$element1 )->applyFromArray ( $styleMediumBlackBorder );
		}
		

		$sheet->getStyle ( 'D'.$row )->applyFromArray( $styleMediumBlackBorderOutline );
		$sheet->getStyle ( 'I'.$row )->applyFromArray( $styleMediumBlackBorderOutline );
		$sheet->getStyle ( 'J'.$row )->applyFromArray( $styleMediumBlackBorderOutline );
		$sheet->getStyle ( 'L'.$row )->applyFromArray( $styleMediumBlackBorderOutline );

		$sumTotals = $row+1;

		$sheet->getStyle ( 'D'.$sumTotals )->applyFromArray( $styleMediumBlackBorderOutline );
		$sheet->getStyle ( 'I'.$sumTotals )->applyFromArray( $styleMediumBlackBorderOutline );
		$sheet->getStyle ( 'J'.$sumTotals )->applyFromArray( $styleMediumBlackBorderOutline );
		$sheet->getStyle ( 'L'.$sumTotals )->applyFromArray( $styleMediumBlackBorderOutline );
		$sheet->setCellValue( 'D'.$row, 'Total No of Pkgs');
		$sheet->setCellValue( 'I'.$row, 'Total Weight (lb)' );
		$sheet->setCellValue( 'J'.$row, 'Total Weight (kg)' );
		$sheet->setCellValue( 'K'.$row, 'Currency ' );
		$sheet->setCellValue( 'L'.$row, 'Total Invoice Value' );
		$sheet->setCellValue( 'D'.$sumTotals, --$increment);
		$sheet->setCellValue( 'I'.$sumTotals, '=SUM(I19:I'.$lastRow.')' );
		$sheet->setCellValue( 'J'.$sumTotals, '=SUM(J19:J'.$lastRow.')' );
		$sheet->setCellValue( 'K'.$sumTotals, 'CAD' );
		$sheet->setCellValue( 'L'.$sumTotals, '=SUM(L19:L'.$lastRow.')' );
		$sheet->getStyle ( 'K19:K'.$lastRow)->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_CURRENCY_USD_SIMPLE );
		$sheet->getStyle ( 'L19:L'.$lastRow)->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_CURRENCY_USD_SIMPLE );
		$sheet->getStyle ( 'L'.$sumTotals)->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_CURRENCY_USD_SIMPLE );
		$sheet->getStyle ( 'A19:A'.$lastRow)->getAlignment()->setWrapText( true );
		$sheet->getStyle ( 'G19:H'.$lastRow)->getAlignment()->setWrapText( true );
		$sheet->getStyle ( 'F19:F'.$lastRow )->getAlignment ()->setHorizontal ( PHPExcel_Style_Alignment::HORIZONTAL_CENTER );
		
		$comment = $lastRow +4;
		$sheet->mergeCells ( 'A'.$comment.':L'.$comment );
		$sheet->setCellValue( 'A'.$comment, 'I DECLARE ALL THE INFORMATION CONTAINED IN THIS INVOICE TO BE TRUE AND CORRECT');
		$comment++;
		$comment++;
		$sheet->mergeCells ( 'A'.$comment.':L'.$comment );
		$sheet->setCellValue( 'A'.$comment, 'SIGNATURE OF SHIPPER / EXPORTER (type name and title and sign');
		$comment++;
		$comment++;
		$sheet->mergeCells ( 'K'.$comment.':L'.$comment );
		$sheet->setCellValue( 'K'.$comment , $shipment->ShipDate->__toString() );
		$comment++;
		$sheet->mergeCells ( 'A'.$comment.':I'.$comment );
		$sheet->setCellValue( 'A'.$comment, 'Joyce Visser             Office Manager');
		$sheet->mergeCells ( 'K'.$comment.':L'.$comment );
		$sheet->setCellValue( 'K'.$comment, 'Date');
		$sheet->getStyle ( 'A'.$comment.':I'.$comment )->applyFromArray( $styleMediumBlackBorderTop );
		$sheet->getStyle ( 'K'.$comment.':L'.$comment )->applyFromArray( $styleMediumBlackBorderTop );
		
		$comment++;
		
		
		// Generic styles
		$sheet->getDefaultRowDimension ()->setRowHeight ( - 1 );
		$sheet->getStyle ( 'A1:L1' )->getAlignment ()->setHorizontal ( PHPExcel_Style_Alignment::HORIZONTAL_CENTER );
		$sheet->getStyle ( 'F12:L14' )->getAlignment ()->setHorizontal ( PHPExcel_Style_Alignment::HORIZONTAL_CENTER );
		$sheet->getStyle ( 'K'.$sumTotals.':K'.$lastRow )->getAlignment ()->setHorizontal ( PHPExcel_Style_Alignment::HORIZONTAL_CENTER );
		$sheet->getStyle ( 'F12:L14' )->getAlignment ()->setVertical ( PHPExcel_Style_Alignment::VERTICAL_TOP );
		$sheet->getStyle ( 'F15:L17' )->getAlignment ()->setVertical ( PHPExcel_Style_Alignment::VERTICAL_TOP );
		$sheet->getStyle ( 'F15:L17' )->getAlignment ()->setWrapText ( true );
		$sheet->getStyle ( 'A1:L1' )->getFont ()->setBold(true)->setSize(18);
		$sheet->getStyle ( 'F12:L14' )->getFont ()->setBold(true)->setSize(18);
		$sheet->getStyle ( 'A1:L1' )->applyFromArray ( $styleMediumBlackBorderOutline );
		$sheet->getStyle ( 'A18:L18' )->getAlignment ()->setWrapText ( true );
		$sheet->getStyle ( 'A18:L18' )->getFont ()->setBold(true);
		
		$sheet->getRowDimension ( 1 )->setRowHeight ( 40 );
		$sheet->getRowDimension ( 18 )->setRowHeight ( 40 );
		$sheet->getColumnDimension ( 'B' )->setAutoSize ( true );
		$sheet->getColumnDimension ( 'C' )->setWidth ( '20' );
		$sheet->getColumnDimension ( 'E' )->setAutoSize ( true );
		$sheet->getColumnDimension ( 'K' )->setAutoSize ( true );
		$sheet->getColumnDimension ( 'L' )->setAutoSize ( true );
		
		$sheet->getStyle ( 'A2:C3' )->applyFromArray ( $styleMediumBlackBorderOutline );
		$sheet->getStyle ( 'D2:J3' )->applyFromArray ( $styleMediumBlackBorderOutline );
		$sheet->getStyle ( 'K2:L3' )->applyFromArray ( $styleMediumBlackBorderOutline );
		
		$sheet->getStyle ( 'A4:E11' )->applyFromArray ( $styleMediumBlackBorderOutline );
		$sheet->getStyle ( 'F4:L11' )->applyFromArray ( $styleMediumBlackBorderOutline );
		
		$sheet->getStyle ( 'A12:E13' )->applyFromArray ( $styleMediumBlackBorderOutline );
		$sheet->getStyle ( 'A14:E15' )->applyFromArray ( $styleMediumBlackBorderOutline );
		$sheet->getStyle ( 'A16:E17' )->applyFromArray ( $styleMediumBlackBorderOutline );
		$sheet->getStyle ( 'F12:L14' )->applyFromArray ( $styleMediumBlackBorderOutline );
		$sheet->getStyle ( 'F15:L17' )->applyFromArray ( $styleMediumBlackBorderOutline );
		$sheet->getStyle ( 'A18' )->applyFromArray ( $styleMediumBlackBorderOutline );
		$sheet->getStyle ( 'B18' )->applyFromArray ( $styleMediumBlackBorderOutline );
		$sheet->getStyle ( 'C18' )->applyFromArray ( $styleMediumBlackBorderOutline );
		$sheet->getStyle ( 'D18' )->applyFromArray ( $styleMediumBlackBorderOutline );
		$sheet->getStyle ( 'E18' )->applyFromArray ( $styleMediumBlackBorderOutline );
		$sheet->getStyle ( 'F18' )->applyFromArray ( $styleMediumBlackBorderOutline );
		$sheet->getStyle ( 'G18' )->applyFromArray ( $styleMediumBlackBorderOutline );
		$sheet->getStyle ( 'H18' )->applyFromArray ( $styleMediumBlackBorderOutline );
		$sheet->getStyle ( 'I18' )->applyFromArray ( $styleMediumBlackBorderOutline );
		$sheet->getStyle ( 'J18' )->applyFromArray ( $styleMediumBlackBorderOutline );
		$sheet->getStyle ( 'K18' )->applyFromArray ( $styleMediumBlackBorderOutline );
		$sheet->getStyle ( 'L18' )->applyFromArray ( $styleMediumBlackBorderOutline );
			
			
			
		// Saving of the file
		
		// Set active sheet index to the first sheet, so Excel opens this as the first sheet
		$this->objPHPExcel->setActiveSheetIndex ( 0 );
		// Set the filename (later add project into name
		$filename = 'commercialInvoice-'.$this->objShipment->ShipmentNumber.'.xlsx';
		// Redirect output to a client’s web browser (Excel2007)
		header ( 'Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' );
		header ( 'Content-Disposition: attachment;filename=' . $filename );
		header ( 'Cache-Control: max-age=0' );
		// If you're serving to IE 9, then the following may be needed
		header ( 'Cache-Control: max-age=1' );
		
		// If you're serving to IE over SSL, then the following may be needed
		header ( 'Expires: Mon, 26 Jul 2015 05:00:00 GMT' ); // Date in the past
		header ( 'Last-Modified: ' . gmdate ( 'D, d M Y H:i:s' ) . ' GMT' ); // always modified
		header ( 'Cache-Control: cache, must-revalidate' ); // HTTP/1.1
		header ( 'Pragma: public' ); // HTTP/1.0
		
		$objWriter = PHPExcel_IOFactory::createWriter ( $this->objPHPExcel, 'Excel2007' );
		PHPExcel_Calculation::getInstance()->clearCalculationCache();
		$objWriter->setPreCalculateFormulas();
		
		ob_end_clean();
		$objWriter->save ( 'php://output' );
		exit ();
	}
}
CommercialInvoiceForm::Run ( 'CommercialInvoiceForm', 'commercial_invoice.tpl.php' );
?>
